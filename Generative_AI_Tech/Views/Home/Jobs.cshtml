@using System.Diagnostics;
@using Newtonsoft.Json

<section class="jobs-parallax">
    <div class="container-fluid">
        <h1 class="w-100 text-center mb-5 pt-5">AI Jobs</h1>

        <p class="text-white text-center">AI job dataset : Insights AI-Jobs</p>
        <p class="text-white text-center">Python source for tables and charts : Kaggle</p>

        <div class="row p-4">
            <div class="col-lg-4 col-sm-12">
                <div class="ps-card">
                    <h2>Top 5 Companies</h2>
                    <p>
                        according to number of employees
                    </p>
                </div>
            </div>
            <div class="col-lg-8 col-sm-12">
                <div id="table"></div>
            </div>
        </div>
        <div class="row p-4 w-lg-75 m-auto">
            <div class="col-lg-8 col-sm-12 d-flex justify-content-center">
<py-config>
    packages = ["matplotlib", "pandas", "numpy"]
</py-config>

<py-script output="piechart">
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import json
from pyodide.http import pyfetch
from pyodide.http import open_url
from js import document
import asyncio
def plot_pie_chart(data, labels):
  fig, ax = plt.subplots()

  ax.pie(data, labels=labels, autopct='%1.1f%%', shadow=True, startangle=140)
  ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
  ax.set_title('Pie Chart')

  display(fig)


  plt_style()
def plt_style():
    plt.rcParams['figure.autolayout'] = True
    plt.rcParams['figure.figsize'] = [6.4, 4.8]
    plt.rcParams['font.family'] = 'serif'
    plt.rcParams['font.size'] = 12
    plt.rcParams['xtick.direction'] = 'in'
    plt.rcParams['ytick.direction'] = 'in'
    plt.rcParams['axes.linewidth'] = 1.0
    plt.rcParams['errorbar.capsize'] = 6
    plt.rcParams['lines.markersize'] = 6
    plt.rcParams['lines.markerfacecolor'] = 'white'
    plt.rcParams['mathtext.fontset'] = 'cm'


dataJson =  @JsonConvert.DeserializeObject(Model.data)

data = [];

for element in dataJson:
    try:
        integer_value = int(element)
        data.append(integer_value)
    except ValueError:
        print(f"Skipping invalid value: {element}")

#plot_data(data)

labels = ['2020', '2021', '2022', '2023']

plot_pie_chart(data, labels)

excelArray = @JsonConvert.DeserializeObject(Model.excelArray)
def generate_html_table(data):
    itr = 0
    table_html = "<table>"
    for row in data:
        if itr == 5:
            break
        itr = itr+1
        table_html += "<tr>"
        for element in row:
            table_html = table_html + "<td>"+ element + "</td>"
        table_html = table_html + "</tr>"
    table_html = table_html + "</table>"
    
    return table_html
c = document.getElementById('table')
url_content = open_url("https://localhost:44373/files/salaries2023.csv")
df = pd.read_csv(url_content)
df.head()
pyscript.write('table',df.head())
</py-script>
               <div id="graph-area"></div>
            </div>
            <div class="col-lg-4 col-sm-12">
                <div class="ps-card">
                    <h2>Job distribution</h2>
                    <p>among top 10 in demand job title</p>
                </div>
            </div>
        </div>      
        <div class="row p-4 d-flex justify-content-center">
            <div class="col-lg-4 col-sm-12">
                <div class="ps-card">
                    <h2>Slaries</h2>
                    <p>
                        in last 3 years
                    </p>
                </div>
            </div>
            <div class="col-lg-8 col-sm-12 d-flex justify-content-center">
                <py-script output="barplot">
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import json
from pyodide.http import pyfetch
from pyodide.http import open_url
from js import document
import asyncio

def plot_data(data):
    x = np.linspace(2020, 2023, len(data))
    y = data
    bar_colors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']
    fig, ax = plt.subplots()

    ax.bar(x, y,width=0.8, linestyle='-', label='Data',color=bar_colors)

    ax.set_xlim(2019, 2024)
    ax.set_ylim(0, 600000)  # Adjust the y-axis limit based on the data
    ax.set_xlabel('Year')
    ax.set_ylabel('Salaries')
    ax.legend()
    ax.set_title('Line Plot')
    display(fig)
dataJson1 =  @JsonConvert.DeserializeObject(Model.data)

data1 = [];

for element1 in dataJson1:
    try:
        integer_value1 = int(element1)
        data1.append(integer_value1)
    except ValueError:
        print(f"Skipping invalid value: {element1}")

plot_data(data1)
                </py-script>
            </div>
        </div>      
    </div>
</section>







@section Scripts{
<link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" />
<script defer src="https://pyscript.net/latest/pyscript.js"></script>
}

@*@{
    var pythonPath = @"C:\Users\Mega Providers\source\repos\Generative_AI_Tech\Generative_AI_Tech\IronPython.2.7.12\net45\ipy.exe"; // Replace with the path to IronPython
    var scriptPath = AppDomain.CurrentDomain.BaseDirectory + "generate_data.py";
    <h5>Path = @pythonPath</h5>
    <h6>Path = @scriptPath</h6>

    var psi = new ProcessStartInfo(pythonPath)
    {
    RedirectStandardOutput = true,
    UseShellExecute = false,
    CreateNoWindow = true,
    Arguments = scriptPath
    };

    using (var process = new Process { StartInfo = psi })
    {
    process.Start();
    process.WaitForExit();
    }
    }

    <h2>Jobs</h2>

    <!-- Include the generated table HTML -->
    <div>
    @Html.Raw(File.ReadAllText("wwwroot/table.html"))
    </div>

    <!-- Display the generated chart -->
    <img src="~/charts/salary_chart.png" alt="Salary Trends" />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>
    <script>
    // Include JavaScript code for additional functionality or interactivity here
    </script>*@
